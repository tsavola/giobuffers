// Copyright (c) 2019 Timo Savola. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package color

struct ColorNRGBA {
  r:uint8;
  g:uint8;
  b:uint8;
  a:uint8;
}

// Package image

struct ImagePoint {
  x:int;
  y:int;
}

struct ImageRectangle {
  min:ImagePoint;
  max:ImagePoint;
}

table ImageDecode {
  data:[ubyte];
}

table ImageNRGBA {
  pix:[uint8];
  stride:int;
  rect:ImageRectangle;
}

union Image {
  ImageDecode:ImageDecode,
  ImageNRGBA:ImageNRGBA,
}

// Package gioui.org/f32

struct F32Point {
  x:float32;
  y:float32;
}

// Package gioui.org/unit

enum Unit:uint8 {
  Px,
  Dp,
  Sp,
}

struct UnitValue {
  v:float32;
  u:Unit;
}

// Package gioui.org/text

enum TextAlignment:uint8 {
  Start,
  End,
  Middle,
}

enum TextStyle:int {
  Regular,
  Italic,
}

table TextFont {
  typeface:string;
  variant:string;
  style:TextStyle;
  weight:int;
}

// Package gioui.org/layout

enum LayoutAlignment:uint8 {
  Start,
  End,
  Middle,
  Baseline,
}

enum LayoutAxis:uint8 {
  Horizontal,
  Vertical,
}

enum LayoutDirection:uint8 {
  NW,
  N,
  NE,
  E,
  SE,
  S,
  SW,
  W,
  Center,
}

enum LayoutSpacing:uint8 {
  End,
  Start,
  Sides,
  Around,
  Between,
  Evenly,
}

table LayoutDirectionLayout {
  direction:LayoutDirection;
  widget:OpNode;
}

table LayoutFlex {
  axis:LayoutAxis;
  spacing:LayoutSpacing;
  alignment:LayoutAlignment;
  weight_sum:float32;
}

table LayoutFlexed {
  weight:float32;
  widget:OpNode;
}

table LayoutRigid {
  widget:OpNode;
}

union LayoutFlexChild {
  Flexed:LayoutFlexed,
  Rigid:LayoutRigid,
}

table LayoutFlexChildNode {
  child:LayoutFlexChild;
  next:LayoutFlexChildNode;
}

table LayoutFlexLayout {
  flex:LayoutFlex;
  children:LayoutFlexChildNode;
}

table LayoutInset {
  top:UnitValue;
  bottom:UnitValue;
  left:UnitValue;
  right:UnitValue;
}

table LayoutInsetLayout {
  inset:LayoutInset;
  widget:OpNode;
}

table LayoutSpacer {
  width:UnitValue;
  height:UnitValue;
}

table LayoutSpacerLayout {
  spacer:LayoutSpacer;
}

table LayoutStack {
  alignment:LayoutDirection;
}

table LayoutExpanded {
  widget:OpNode;
}

table LayoutStacked {
  widget:OpNode;
}

union LayoutStackChild {
  Expanded:LayoutExpanded,
  Stacked:LayoutStacked,
}

table LayoutStackChildNode {
  child:LayoutStackChild;
  next:LayoutStackChildNode;
}

table LayoutStackLayout {
  stack:LayoutStack;
  children:LayoutStackChildNode;
}

// Package gioui.org/op/paint

table PaintColorOp {
  color:ColorNRGBA;
}

table PaintImageOp {
  src_id:string;
  src:Image;
}

table PaintLinearGradientOp {
  stop1:F32Point;
  color1:ColorNRGBA;
  stop2:F32Point;
  color2:ColorNRGBA;
}

table PaintOp {
}

// Package gioui.org/widget

enum WidgetFit:uint8 {
  Unscaled,
  Contain,
  Cover,
  ScaleDown,
  Fill,
}

table WidgetBorder {
  color:ColorNRGBA;
  corner_radius:UnitValue;
  width:UnitValue;
}

table WidgetBorderLayout {
  border:WidgetBorder;
  widget:OpNode;
}

table WidgetIcon {
  data:[ubyte];
}

table WidgetIconLayout {
  icon_id:string;
  icon:WidgetIcon;
  color:ColorNRGBA;
}

table WidgetImage {
  src:PaintImageOp;
  fit:WidgetFit;
  position:LayoutDirection;
  scale:float32;
}

table WidgetImageLayout {
  image:WidgetImage;
}

table WidgetLabel {
  alignment:TextAlignment;
  max_lines:int;
}

table WidgetLabelLayout {
  label:WidgetLabel;
  font:TextFont;
  size:UnitValue;
  text:string;
}

// Package gioui.org/op

union Op {
  Macro:OpNode,
  LayoutDirection:LayoutDirectionLayout,
  LayoutFlex:LayoutFlexLayout,
  LayoutInset:LayoutInsetLayout,
  LayoutSpacer:LayoutSpacerLayout,
  LayoutStack:LayoutStackLayout,
  PaintColor:PaintColorOp,
  PaintImage:PaintImageOp,
  PaintLinearGradient:PaintLinearGradientOp,
  Paint:PaintOp,
  WidgetBorder:WidgetBorderLayout,
  WidgetIcon:WidgetIconLayout,
  WidgetImage:WidgetImageLayout,
  WidgetLabel:WidgetLabelLayout,
}

table OpNode {
  op:Op;
  previous:OpNode;
}

root_type OpNode;
