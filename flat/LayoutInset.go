// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LayoutInset struct {
	_tab flatbuffers.Table
}

func GetRootAsLayoutInset(buf []byte, offset flatbuffers.UOffsetT) *LayoutInset {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LayoutInset{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LayoutInset) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LayoutInset) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LayoutInset) Top(obj *UnitValue) *UnitValue {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(UnitValue)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LayoutInset) Bottom(obj *UnitValue) *UnitValue {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(UnitValue)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LayoutInset) Left(obj *UnitValue) *UnitValue {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(UnitValue)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LayoutInset) Right(obj *UnitValue) *UnitValue {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(UnitValue)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func LayoutInsetStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func LayoutInsetAddTop(builder *flatbuffers.Builder, top flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(top), 0)
}
func LayoutInsetAddBottom(builder *flatbuffers.Builder, bottom flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(bottom), 0)
}
func LayoutInsetAddLeft(builder *flatbuffers.Builder, left flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(left), 0)
}
func LayoutInsetAddRight(builder *flatbuffers.Builder, right flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(right), 0)
}
func LayoutInsetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
