// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LayoutStackChildNode struct {
	_tab flatbuffers.Table
}

func GetRootAsLayoutStackChildNode(buf []byte, offset flatbuffers.UOffsetT) *LayoutStackChildNode {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LayoutStackChildNode{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LayoutStackChildNode) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LayoutStackChildNode) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LayoutStackChildNode) ChildType() LayoutStackChild {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return LayoutStackChild(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *LayoutStackChildNode) MutateChildType(n LayoutStackChild) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *LayoutStackChildNode) Child(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *LayoutStackChildNode) Next(obj *LayoutStackChildNode) *LayoutStackChildNode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(LayoutStackChildNode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func LayoutStackChildNodeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func LayoutStackChildNodeAddChildType(builder *flatbuffers.Builder, childType LayoutStackChild) {
	builder.PrependByteSlot(0, byte(childType), 0)
}
func LayoutStackChildNodeAddChild(builder *flatbuffers.Builder, child flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(child), 0)
}
func LayoutStackChildNodeAddNext(builder *flatbuffers.Builder, next flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(next), 0)
}
func LayoutStackChildNodeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
