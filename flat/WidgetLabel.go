// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WidgetLabel struct {
	_tab flatbuffers.Table
}

func GetRootAsWidgetLabel(buf []byte, offset flatbuffers.UOffsetT) *WidgetLabel {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WidgetLabel{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *WidgetLabel) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WidgetLabel) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WidgetLabel) Alignment() TextAlignment {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return TextAlignment(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *WidgetLabel) MutateAlignment(n TextAlignment) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *WidgetLabel) MaxLines() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WidgetLabel) MutateMaxLines(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func WidgetLabelStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func WidgetLabelAddAlignment(builder *flatbuffers.Builder, alignment TextAlignment) {
	builder.PrependByteSlot(0, byte(alignment), 0)
}
func WidgetLabelAddMaxLines(builder *flatbuffers.Builder, maxLines int32) {
	builder.PrependInt32Slot(1, maxLines, 0)
}
func WidgetLabelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
