// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PaintLinearGradientOp struct {
	_tab flatbuffers.Table
}

func GetRootAsPaintLinearGradientOp(buf []byte, offset flatbuffers.UOffsetT) *PaintLinearGradientOp {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PaintLinearGradientOp{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *PaintLinearGradientOp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PaintLinearGradientOp) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PaintLinearGradientOp) Stop1(obj *F32Point) *F32Point {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(F32Point)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PaintLinearGradientOp) Color1(obj *ColorNRGBA) *ColorNRGBA {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(ColorNRGBA)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PaintLinearGradientOp) Stop2(obj *F32Point) *F32Point {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(F32Point)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *PaintLinearGradientOp) Color2(obj *ColorNRGBA) *ColorNRGBA {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(ColorNRGBA)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func PaintLinearGradientOpStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func PaintLinearGradientOpAddStop1(builder *flatbuffers.Builder, stop1 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(stop1), 0)
}
func PaintLinearGradientOpAddColor1(builder *flatbuffers.Builder, color1 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(color1), 0)
}
func PaintLinearGradientOpAddStop2(builder *flatbuffers.Builder, stop2 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(stop2), 0)
}
func PaintLinearGradientOpAddColor2(builder *flatbuffers.Builder, color2 flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(color2), 0)
}
func PaintLinearGradientOpEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
