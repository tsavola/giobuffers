// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LayoutStackLayout struct {
	_tab flatbuffers.Table
}

func GetRootAsLayoutStackLayout(buf []byte, offset flatbuffers.UOffsetT) *LayoutStackLayout {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LayoutStackLayout{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LayoutStackLayout) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LayoutStackLayout) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LayoutStackLayout) Stack(obj *LayoutStack) *LayoutStack {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(LayoutStack)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *LayoutStackLayout) Children(obj *LayoutStackChildNode) *LayoutStackChildNode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(LayoutStackChildNode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func LayoutStackLayoutStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func LayoutStackLayoutAddStack(builder *flatbuffers.Builder, stack flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(stack), 0)
}
func LayoutStackLayoutAddChildren(builder *flatbuffers.Builder, children flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(children), 0)
}
func LayoutStackLayoutEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
