// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LayoutFlexed struct {
	_tab flatbuffers.Table
}

func GetRootAsLayoutFlexed(buf []byte, offset flatbuffers.UOffsetT) *LayoutFlexed {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LayoutFlexed{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LayoutFlexed) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LayoutFlexed) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LayoutFlexed) Weight() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LayoutFlexed) MutateWeight(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *LayoutFlexed) Widget(obj *OpNode) *OpNode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(OpNode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func LayoutFlexedStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func LayoutFlexedAddWeight(builder *flatbuffers.Builder, weight float32) {
	builder.PrependFloat32Slot(0, weight, 0.0)
}
func LayoutFlexedAddWidget(builder *flatbuffers.Builder, widget flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(widget), 0)
}
func LayoutFlexedEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
