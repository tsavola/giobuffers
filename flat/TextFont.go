// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TextFont struct {
	_tab flatbuffers.Table
}

func GetRootAsTextFont(buf []byte, offset flatbuffers.UOffsetT) *TextFont {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TextFont{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *TextFont) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TextFont) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TextFont) Typeface() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TextFont) Variant() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *TextFont) Style() TextStyle {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return TextStyle(rcv._tab.GetInt32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *TextFont) MutateStyle(n TextStyle) bool {
	return rcv._tab.MutateInt32Slot(8, int32(n))
}

func (rcv *TextFont) Weight() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TextFont) MutateWeight(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func TextFontStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func TextFontAddTypeface(builder *flatbuffers.Builder, typeface flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(typeface), 0)
}
func TextFontAddVariant(builder *flatbuffers.Builder, variant flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(variant), 0)
}
func TextFontAddStyle(builder *flatbuffers.Builder, style TextStyle) {
	builder.PrependInt32Slot(2, int32(style), 0)
}
func TextFontAddWeight(builder *flatbuffers.Builder, weight int32) {
	builder.PrependInt32Slot(3, weight, 0)
}
func TextFontEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
