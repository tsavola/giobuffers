// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type LayoutFlex struct {
	_tab flatbuffers.Table
}

func GetRootAsLayoutFlex(buf []byte, offset flatbuffers.UOffsetT) *LayoutFlex {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &LayoutFlex{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *LayoutFlex) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *LayoutFlex) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *LayoutFlex) Axis() LayoutAxis {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return LayoutAxis(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *LayoutFlex) MutateAxis(n LayoutAxis) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *LayoutFlex) Spacing() LayoutSpacing {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return LayoutSpacing(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *LayoutFlex) MutateSpacing(n LayoutSpacing) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *LayoutFlex) Alignment() LayoutAlignment {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return LayoutAlignment(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *LayoutFlex) MutateAlignment(n LayoutAlignment) bool {
	return rcv._tab.MutateByteSlot(8, byte(n))
}

func (rcv *LayoutFlex) WeightSum() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *LayoutFlex) MutateWeightSum(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func LayoutFlexStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func LayoutFlexAddAxis(builder *flatbuffers.Builder, axis LayoutAxis) {
	builder.PrependByteSlot(0, byte(axis), 0)
}
func LayoutFlexAddSpacing(builder *flatbuffers.Builder, spacing LayoutSpacing) {
	builder.PrependByteSlot(1, byte(spacing), 0)
}
func LayoutFlexAddAlignment(builder *flatbuffers.Builder, alignment LayoutAlignment) {
	builder.PrependByteSlot(2, byte(alignment), 0)
}
func LayoutFlexAddWeightSum(builder *flatbuffers.Builder, weightSum float32) {
	builder.PrependFloat32Slot(3, weightSum, 0.0)
}
func LayoutFlexEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
