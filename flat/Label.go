// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Label struct {
	_tab flatbuffers.Table
}

func GetRootAsLabel(buf []byte, offset flatbuffers.UOffsetT) *Label {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Label{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Label) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Label) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Label) Face(obj *Face) *Face {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Face)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Label) Material(obj *OpNode) *OpNode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(OpNode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Label) Alignment() Alignment {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Label) MutateAlignment(n Alignment) bool {
	return rcv._tab.MutateByteSlot(8, n)
}

func (rcv *Label) Text() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Label) MaxLines() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Label) MutateMaxLines(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func LabelStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func LabelAddFace(builder *flatbuffers.Builder, face flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(face), 0)
}
func LabelAddMaterial(builder *flatbuffers.Builder, material flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(material), 0)
}
func LabelAddAlignment(builder *flatbuffers.Builder, alignment byte) {
	builder.PrependByteSlot(2, alignment, 0)
}
func LabelAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(text), 0)
}
func LabelAddMaxLines(builder *flatbuffers.Builder, maxLines int32) {
	builder.PrependInt32Slot(4, maxLines, 0)
}
func LabelEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
