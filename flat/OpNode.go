// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type OpNode struct {
	_tab flatbuffers.Table
}

func GetRootAsOpNode(buf []byte, offset flatbuffers.UOffsetT) *OpNode {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &OpNode{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *OpNode) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *OpNode) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *OpNode) OpType() Op {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Op(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *OpNode) MutateOpType(n Op) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *OpNode) Op(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *OpNode) Next(obj *OpNode) *OpNode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(OpNode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func OpNodeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func OpNodeAddOpType(builder *flatbuffers.Builder, opType Op) {
	builder.PrependByteSlot(0, byte(opType), 0)
}
func OpNodeAddOp(builder *flatbuffers.Builder, op flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(op), 0)
}
func OpNodeAddNext(builder *flatbuffers.Builder, next flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(next), 0)
}
func OpNodeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
