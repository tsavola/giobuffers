// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package flat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ImageNRGBA struct {
	_tab flatbuffers.Table
}

func GetRootAsImageNRGBA(buf []byte, offset flatbuffers.UOffsetT) *ImageNRGBA {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ImageNRGBA{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *ImageNRGBA) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ImageNRGBA) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ImageNRGBA) Pix(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ImageNRGBA) PixLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ImageNRGBA) PixBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ImageNRGBA) MutatePix(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *ImageNRGBA) Stride() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ImageNRGBA) MutateStride(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *ImageNRGBA) Rect(obj *ImageRectangle) *ImageRectangle {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(ImageRectangle)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ImageNRGBAStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ImageNRGBAAddPix(builder *flatbuffers.Builder, pix flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(pix), 0)
}
func ImageNRGBAStartPixVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ImageNRGBAAddStride(builder *flatbuffers.Builder, stride int32) {
	builder.PrependInt32Slot(1, stride, 0)
}
func ImageNRGBAAddRect(builder *flatbuffers.Builder, rect flatbuffers.UOffsetT) {
	builder.PrependStructSlot(2, flatbuffers.UOffsetT(rect), 0)
}
func ImageNRGBAEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
